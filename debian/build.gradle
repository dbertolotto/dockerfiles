ext {
  arch = 'amd64'
  var = 'minbase'
  ver = "stretch"
  excl = 'none'
  tmpchr = 'tmpchr'
  tmpdocker = 'docker'
  tmpfile = 'tmpfile.tar'
  builddir = buildDir.absolutePath + '/' + ver
}

task prepareDir {
  doLast {
    mkdir builddir + '/' + tmpchr
  }
}

task aptDeps (type: Exec) {
  commandLine 'apt-get','-y','install','debootstrap'
}

task debootstrap (type: Exec) {
  workingDir builddir
  commandLine 'debootstrap', '--arch='+project.ext.arch, '--exclude='+project.ext.excl, '--variant='+project.ext.var, project.ext.ver, project.ext.tmpchr, 'http://deb.debian.org/debian/'
}

task chrAptClean (type: Exec) {
  workingDir builddir
  commandLine 'chroot',tmpchr,'apt-get','-y','clean'
}

task chrAptRemove (type: Exec) {
  workingDir builddir
  commandLine 'chroot',tmpchr,'rm','-rf','/var/lib/apt/lists'
}

task chrTar (type: Exec) {
  workingDir builddir
  commandLine 'tar','-C',tmpchr,'-cf',tmpfile,'.'
}

task prepareDocker (type: Copy) {
  from "./Dockerfile.template"
  into builddir + '/' + tmpdocker
  rename { file -> 'Dockerfile' }
  expand(file: tmpfile)
}

task build (type: GradleBuild) {
  tasks = ['clean','prepareDir','aptDeps','debootstrap','chrAptClean','chrAptRemove','chrTar']
}

task dockerBuild (type: GradleBuild) {
  tasks = ['build','prepareDocker']
}

task clean (type:Delete) {
  delete buildDir
}
