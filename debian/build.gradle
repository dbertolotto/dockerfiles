ext {
  arch = 'amd64'
  var = 'minbase'
  ver = "stretch"
  excl = 'none'
  tmpchr = 'tmpchr'
  tmpdocker = 'docker'
  tmpfile = 'tmpfile.tar'
  builddir = buildDir.absolutePath + '/' + ver
  templateDir = 'template'
  dockername = 'dbertolotto/debian/'
  imgname = dockername + ver + ':' + var
}

task copyChroot (type: Copy) {
  from templateDir + '/build.template'
  into buildDir.absolutePath + '/' + ver
  rename { file -> 'build' }
  expand(architecture: arch, variant: var, version: ver,  exclude: excl, tempchroot: tmpchr, tempfile: tmpfile)
}

task buildChroot (type: Exec) {
  dependsOn 'copyChroot'
  workingDir builddir
  commandLine 'bash','build'
}

task prepareDocker {
  doLast {
    def outfile = builddir + '/' + 'dftmp'
    concat(outfile,
           projectDir.absolutePath + '/' + templateDir + '/' + 'Dockerfile.template',
           rootDir.absolutePath + '/' + templateDir + '/' + 'Dockerfile-labels.template') 
  }
}

task copyDocker (type: Copy) {
  from builddir + '/' + 'dftmp'
  into buildDir.absolutePath + '/' + ver
  rename { file -> 'Dockerfile' }
  expand(file: tmpfile, imgname: imgname, imgdate: getDate())
}

task buildDocker (type: Exec) {
  dependsOn 'copyDocker'
  workingDir builddir
  commandLine 'docker','build','-t',imgname,'.'
}

task chrootBuild (type: GradleBuild) {
  tasks = ['copyChroot','buildChroot']
}

task dockerBuild (type: GradleBuild) {
  tasks = ['copyDocker','buildDocker']
}

task build (type: GradleBuild) {
  tasks = ['chrootBuild','dockerBuild']
}

task clean (type:Delete) {
  delete buildDir
}
