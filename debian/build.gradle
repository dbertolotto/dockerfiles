ext {
  // defaults
  arch = 'amd64'
  var = 'minbase'
  ver = 'stretch'
  excl = 'none'
  builddir = buildDir.absolutePath + '/' + ver
  dockerDir = builddir + '/docker'
  image_title = 'Debian Stretch'
  image_description = 'Custom Debian Stretch image'
  image_ref_name = '-'
  // properties
  tmpchr = 'tmpchr'
  tmpdocker = 'docker'
  tmpfile = 'tmpfile.tar'
  templateDir = 'template'
  dockername = 'dbertolotto/debian/'
}

task prepareStretch {
  doFirst {
    arch = 'amd64'
    var = 'minbase'
    ver = 'stretch'
    excl = 'none'
    image_title = 'Debian Stretch'
    image_description = 'Custom Debian Stretch image'
  }
}

task postPrep {
  doFirst {
    builddir = buildDir.absolutePath + '/' + ver
    dockerDir = builddir + '/docker'
    image_ref_name = dockername + ver + ':' + var
    mkdir dockerDir
    println image_ref_name
  }
}

task copyChroot (type: Copy) {
  dependsOn 'postPrep'
  from templateDir + '/build.template'
  into buildDir.absolutePath + '/' + ver
  rename { file -> 'build' }
  expand(architecture: arch, variant: var, version: ver,  exclude: excl, tempchroot: tmpchr, tempfile: tmpfile)
}

task buildChroot (type: Exec) {
  dependsOn 'copyChroot'
  workingDir builddir
  commandLine 'bash','build'
}

task prepareDocker {
  dependsOn 'postPrep'
  doLast {
    def outfile = dockerDir + '/' + 'Dockerfile.template'
    concat(outfile,
           projectDir.absolutePath + '/' + templateDir + '/' + 'Dockerfile-debian.template',
           rootDir.absolutePath + '/' + templateDir + '/' + 'Dockerfile-tini.template',
           rootDir.absolutePath + '/' + templateDir + '/' + 'Dockerfile-labels.template') 
  }
}

task copyDocker (type: Copy) {
  dependsOn 'prepareDocker'
  from dockerDir + '/' + 'Dockerfile.template'
  into buildDir.absolutePath + '/' + ver
  rename { file -> 'Dockerfile' }
  expand(file: tmpfile,
    version_tini: version_tini,
    image_created: getDate(),
    image_authors: image_authors,
    image_url: image_url,
    image_documentation: image_documentation,
    image_source: image_source,
    image_version: image_version,
    image_revision: image_revision,
    image_vendor: image_vendor,
    image_licenses: image_licenses,
    image_ref_name: image_ref_name,
    image_title: image_title,
    image_description: image_description)
}

task buildDocker (type: Exec) {
  dependsOn 'copyDocker'
  workingDir builddir
  println image_ref_name
  commandLine 'docker','build','-t',image_ref_name,'.'
}

task buildStretch (type: GradleBuild) {
  tasks = ['prepareStretch','buildChroot','buildDocker']
}

task stretch (type: GradleBuild) {
  tasks = ['clean','buildStretch']
}

task clean (type:Delete) {
  delete buildDir
}
