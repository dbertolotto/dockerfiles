/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

// plugins
plugins {
  id 'base'
}

// common variables
ext {
  // Dockerfile-labels.template => see https://github.com/opencontainers/image-spec/blob/master/annotations.md
  image_created = '-'
  image_authors = 'Davide Bertolotto (davide.bertolotto@gmail.com)'
  image_url = '-'
  image_documentation = '-'
  image_source = '-'
  image_version = '-'
  image_revision = '-'
  image_vendor = 'Davide Bertolotto (davide.bertolotto@gmail.com)' 
  image_licenses = '-'
  image_ref_name = '-'
  image_title = '-'
  image_description = '-'
  // Dockerfile-tini.template
  version_tini = 'v0.18.0'
}

// example
allprojects {
  task list {
    doFirst { task ->
      println "- $task.project.name"
    }
  }
}


// get current date in RFC 3339 format
def getDate() {
    return new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
}

// concatenate more files to an output file
def concat(outfile, String... infiles) {
  (new File(outfile)).text = files(*infiles).collect{it.getText()}.join("\n")
}
